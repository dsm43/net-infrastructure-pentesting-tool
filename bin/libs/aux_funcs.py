import logging
from consolemenu import SelectionMenu
from scapy.sendrecv import send, sendp
from scapy.packet import Packet
from scapy.fields import *
from scapy.contrib.ospf import _OSPF_Router_LSA_types
from pathlib import Path
from enum import Enum




def send_l3_single(args):
    pkt = args['pkt']
    iface = args['iface']

    res = send(pkt, iface=iface)

    return res

def send_l3_loop(args):
    pkt = args['pkt']
    iface = args['iface']

    try:
        res = send(pkt, iface=iface, loop=1)
    except KeyboardInterrupt:
        return res
    return res

def send_l2_single(args):
    pkt = args['pkt']
    iface = args['iface']

    res = sendp(pkt, iface=iface)

    return res

def send_l2_loop(args):
    pkt = args['pkt']
    iface = args['iface']

    try:
        res = sendp(pkt, iface=iface, loop=1)
    except KeyboardInterrupt:
        logging.debug("Stopping attack...")
        return res
    return res

# Patched OSPF class to support TOS fields
class OSPF_Link(Packet):
    name = "OSPF Link"
    fields_desc = [IPField("id", "192.168.0.0"),
                   IPField("data", "255.255.255.0"),
                   ByteEnumField("type", 3, _OSPF_Router_LSA_types),
                   ByteField("toscount", 0),
                   ShortField("metric", 10),
                   
                   ConditionalField(ByteField("tos", 0), lambda pkt: pkt.toscount == 1),
                   ConditionalField(ByteField("reserved", 0), lambda pkt: pkt.toscount == 1),  # noqa: E501
                   ConditionalField(ShortField("tosmetric", 0), lambda pkt: pkt.toscount == 1)]  # noqa: E501

    def extract_padding(self, s):
        return "", s

def file_selector(base_path):
    bp = Path(base_path)
    while True:
        p_list = [x for x in bp.iterdir()]

        p_select_nr = SelectionMenu.get_selection([x.parts[-1] for x in p_list])

        p_select = p_list[p_select_nr]

        if p_select.is_file():
            return p_select
        else:
            bp =  p_select
        


class attack_type(Enum):
    DoS = "DoS"
    RoutePoisoning = "Route Poisoning"
    NetworkScan = "Network Scan"
    Test = "Ping Test"
    Periodic = "Periodic"
    Wrapper = "Wrapper"
    SingleUse = "Single Use"
    MitM = "Man-in-the-Middle"


class attack_cat(Enum):
    Attack = "Attack"
    Middleware = "Middleware"

class attack_layer(Enum):
    L2 = "L2"
    L3_OSPF = "L3 - OSPF"
    L3_BGP = "L3 - BGP"
    L3_RIP = "L3 - RIP"
    L4 = "L4"


def type_wrapper(name: str, type: attack_type, category: attack_cat, layer: attack_layer, arg_list: list):
    def _type_wrapper(func):
        func.type = type
        func.name = name
        func.category = category
        func.layer = layer
        func.arg_list = arg_list

        return func
    return _type_wrapper